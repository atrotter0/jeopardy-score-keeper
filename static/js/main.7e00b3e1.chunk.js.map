{"version":3,"sources":["components/Player/Player.tsx","components/PointsCard/PointsCard.tsx","components/PointsPage/PointsPage.tsx","components/PointsPageFinal/PointsPageFinal.tsx","components/PointSelection/PointSelection.tsx","components/BottomMenu/BottomMenu.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","maxWidth","height","avatar","backgroundColor","red","textInputWrapper","paddingTop","paddingLeft","paddingRight","marginBottom","display","justifyContent","textAlign","scoreText","lineHeight","marginLeft","scoreWrapper","width","paddingBottom","Player","name","score","setName","classes","setScore","useState","playerNameVisible","setPlayerNameVisibility","editNameVisible","setEditNameVisibility","togglePlayerNameControls","Paper","elevation","className","CardHeader","Avatar","aria-label","split","action","IconButton","fontSize","onClick","title","TextField","id","label","onChange","e","input","currentTarget","value","updatePlayerName","CardContent","Typography","variant","color","component","paperWrapper","marginTop","pointButtonWrapper","alignItems","flexDirection","pointsText","marginRight","PointsCard","pointValue","PointsPage","visible","pointValues","map","PointsPageFinal","finalJeopardyWager","setFinalJeopardyWager","wagerVisible","setWagerVisibility","editWagerVisible","setEditWagerVisibility","parseInt","updateFinalWager","PointSelection","jeopardyVisible","doubleJeopardyVisible","finalJeopardyVisible","position","bottom","BottomMenu","setJeopardyVisible","setDoubleJeopardyVisible","setFinalJeopardyVisible","setValue","BottomNavigation","event","newValue","showLabels","BottomNavigationAction","icon","App","setJeopardyVisibility","setDoubleJeopardyVisibility","setFinalJeopardyVisibility","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e00b3e1.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useState } from 'react';\n\n// Styles\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\n\n// Components\nimport Paper from '@material-ui/core/Paper';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\n\n// Icons\nimport Avatar from '@material-ui/core/Avatar';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      maxWidth: '100%',\n      height: 150,\n    },\n    avatar: {\n      // @TODO: Set random color.\n      backgroundColor: red[500],\n    },\n    textInputWrapper: {\n      paddingTop: 5,\n      paddingLeft: 20,\n      paddingRight: 8,\n      marginBottom: 20,\n      display: 'flex',\n      justifyContent: 'space-between',\n      textAlign: 'center',\n    },\n    scoreText: {\n      textAlign: 'center',\n      lineHeight: 1.5,\n      marginLeft: -5,\n    },\n    scoreWrapper: {\n      display: 'inline-flex',\n      width: '100%',\n      justifyContent: 'center',\n      lineHeight: 25,\n      paddingTop: 5,\n      paddingBottom: 4,\n    },\n  })\n);\n\ninterface PlayerProps {\n  name: string;\n  score: number;\n  setName: Dispatch<SetStateAction<string>>;\n  setScore: Dispatch<SetStateAction<number>>;\n}\n\nconst Player: React.FC<PlayerProps> = ({ name, score, setName, setScore }) => {\n  const classes = useStyles();\n  const [playerNameVisible, setPlayerNameVisibility] = useState(true);\n  const [editNameVisible, setEditNameVisibility] = useState(false);\n\n  const togglePlayerNameControls = () => {\n    setPlayerNameVisibility(!playerNameVisible);\n    setEditNameVisibility(!editNameVisible);\n  };\n\n  const updatePlayerName = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const input = e.currentTarget.value;\n    setName(input);\n  };\n\n  const getFirstInitial = (): string => name.split('')[0];\n\n  return (\n    <Paper elevation={0} className={classes.root}>\n      {playerNameVisible ? (\n        <CardHeader\n          avatar={\n            <Avatar aria-label=\"recipe\" className={classes.avatar}>\n              {getFirstInitial()}\n            </Avatar>\n          }\n          action={\n            <IconButton aria-label=\"edit-player-name\">\n              <EditIcon fontSize=\"default\" onClick={togglePlayerNameControls} />\n            </IconButton>\n          }\n          title={name}\n        />\n      ) : (\n        <div className={classes.textInputWrapper}>\n          <TextField\n            id=\"enter-name\"\n            label=\"Enter name\"\n            onChange={e => updatePlayerName(e)}\n          />\n          <IconButton aria-label=\"confirm-player-name\">\n            <CheckCircleIcon\n              fontSize=\"default\"\n              onClick={togglePlayerNameControls}\n            />\n          </IconButton>\n        </div>\n      )}\n      <CardContent>\n        <div className={classes.scoreWrapper}>\n          <AttachMoneyIcon fontSize=\"large\" />\n          <Typography\n            variant=\"h5\"\n            color=\"textPrimary\"\n            component=\"p\"\n            className={classes.scoreText}\n          >\n            {score}\n          </Typography>\n        </div>\n      </CardContent>\n    </Paper>\n  );\n};\n\nexport default Player;\n","import React, { Dispatch, SetStateAction } from 'react';\n\n// Styles\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\n// Components\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\n\n// Icons\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport IndeterminateCheckBoxIcon from '@material-ui/icons/IndeterminateCheckBox';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paperWrapper: {\n      marginTop: 10,\n      marginBottom: 10,\n    },\n    pointButtonWrapper: {\n      display: 'flex',\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'center',\n    },\n    pointsText: {\n      marginRight: 50,\n    },\n  })\n);\n\ninterface PointsCardProps {\n  pointValue: number;\n  score: number;\n  setScore: Dispatch<SetStateAction<number>>;\n}\n\nconst PointsCard: React.FC<PointsCardProps> = ({\n  pointValue,\n  score,\n  setScore,\n}) => {\n  const classes = useStyles();\n\n  const addToScore = () => setScore(score + pointValue);\n\n  const subtractFromScore = () => setScore(score - pointValue);\n\n  return (\n    <Paper elevation={1} className={classes.paperWrapper}>\n      <div className={classes.pointButtonWrapper}>\n        <Typography\n          variant=\"h5\"\n          color=\"textPrimary\"\n          component=\"p\"\n          className={classes.pointsText}\n        >\n          ${pointValue}\n        </Typography>\n        <IconButton aria-label=\"add-score\" onClick={addToScore}>\n          <AddBoxIcon fontSize=\"large\" />\n        </IconButton>\n        <IconButton aria-label=\"subtract-score\" onClick={subtractFromScore}>\n          <IndeterminateCheckBoxIcon fontSize=\"large\" />\n        </IconButton>\n      </div>\n    </Paper>\n  );\n};\n\nexport default PointsCard;\n","import React, { Dispatch, SetStateAction } from 'react';\n\n// Components\nimport PointsCard from '../PointsCard/PointsCard';\nimport Typography from '@material-ui/core/Typography';\n\ninterface PointsPageProps {\n  visible: boolean;\n  title: string;\n  pointValues: number[];\n  score: number;\n  setScore: Dispatch<SetStateAction<number>>;\n}\n\nconst PointsPage: React.FC<PointsPageProps> = ({\n  visible,\n  title,\n  pointValues,\n  score,\n  setScore,\n}) => {\n  return (\n    <>\n      {visible && (\n        <>\n          <Typography variant=\"h5\" color=\"textPrimary\" component=\"p\">\n            {title === 'Jeopardy' ? title : `${title} Jeopardy`}\n          </Typography>\n          {pointValues.map((value: number) => (\n            <PointsCard pointValue={value} score={score} setScore={setScore} />\n          ))}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default PointsPage;\n","import React, { Dispatch, SetStateAction, useState } from 'react';\n\n// Styles\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\n// Components\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport PointsCard from '../PointsCard/PointsCard';\n\n// Icons\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paperWrapper: {\n      height: 60,\n      marginTop: 10,\n      marginBottom: 10,\n    },\n    textInputWrapper: {\n      paddingTop: 5,\n      paddingLeft: 20,\n      paddingRight: 8,\n      marginBottom: 20,\n      display: 'flex',\n      justifyContent: 'space-between',\n      textAlign: 'center',\n    },\n  })\n);\n\ninterface PointsPageFinalProps {\n  visible: boolean;\n  title: string;\n  score: number;\n  setScore: Dispatch<SetStateAction<number>>;\n}\n\nconst PointsPageFinal: React.FC<PointsPageFinalProps> = ({\n  visible,\n  title,\n  score,\n  setScore,\n}) => {\n  const classes = useStyles();\n  const [finalJeopardyWager, setFinalJeopardyWager] = useState(0);\n  const [wagerVisible, setWagerVisibility] = useState(true);\n  const [editWagerVisible, setEditWagerVisibility] = useState(true);\n\n  const updateFinalWager = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const input = e.currentTarget.value;\n    setFinalJeopardyWager(parseInt(input));\n  };\n\n  const toggleEditWagerVisible = () => {\n    setWagerVisibility(!wagerVisible);\n    setEditWagerVisibility(!editWagerVisible);\n  };\n\n  return (\n    <>\n      {visible && (\n        <>\n          <Typography variant=\"h5\" color=\"textPrimary\" component=\"p\">\n            {title === 'Jeopardy' ? title : `${title} Jeopardy`}\n          </Typography>\n          <Paper elevation={1} className={classes.paperWrapper}>\n            {editWagerVisible ? (\n              <div className={classes.textInputWrapper}>\n                <TextField\n                  id=\"enter-wager\"\n                  label=\"Enter wager\"\n                  onChange={e => updateFinalWager(e)}\n                />\n                <IconButton aria-label=\"confirm-player-name\">\n                  <CheckCircleIcon\n                    fontSize=\"default\"\n                    onClick={toggleEditWagerVisible}\n                  />\n                </IconButton>\n              </div>\n            ) : (\n              <PointsCard\n                pointValue={finalJeopardyWager}\n                score={score}\n                setScore={setScore}\n              />\n            )}\n          </Paper>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default PointsPageFinal;\n","import React, { Dispatch, SetStateAction } from 'react';\n\n// Components\nimport PointsPage from '../PointsPage/PointsPage';\nimport PointsPageFinal from '../PointsPageFinal/PointsPageFinal';\n\ninterface PointSelectionProps {\n  jeopardyVisible: boolean;\n  doubleJeopardyVisible: boolean;\n  finalJeopardyVisible: boolean;\n  score: number;\n  setScore: Dispatch<SetStateAction<number>>;\n}\n\nconst PointSelection: React.FC<PointSelectionProps> = ({\n  jeopardyVisible,\n  doubleJeopardyVisible,\n  finalJeopardyVisible,\n  score,\n  setScore,\n}) => {\n  return (\n    <>\n      {/* Jeopardy */}\n      <PointsPage\n        visible={jeopardyVisible}\n        title=\"Jeopardy\"\n        pointValues={[200, 400, 600, 800, 1000]}\n        score={score}\n        setScore={setScore}\n      />\n      {/* Double Jeopardy */}\n      <PointsPage\n        visible={\n          doubleJeopardyVisible && !jeopardyVisible && !finalJeopardyVisible\n        }\n        title=\"Double\"\n        pointValues={[400, 800, 1200, 1600, 2000]}\n        score={score}\n        setScore={setScore}\n      />\n      {/* Final Jeopardy */}\n      <PointsPageFinal\n        visible={\n          finalJeopardyVisible && !jeopardyVisible && !doubleJeopardyVisible\n        }\n        title=\"Final\"\n        score={score}\n        setScore={setScore}\n      />\n    </>\n  );\n};\n\nexport default PointSelection;\n","import React, { Dispatch, SetStateAction, useState } from 'react';\n\n// Styles\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Components\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\n\n// Icons\nimport PresentToAllIcon from '@material-ui/icons/PresentToAll';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    position: 'fixed',\n    bottom: 0,\n    paddingBottom: 20,\n  },\n});\n\ninterface BottomMenuProps {\n  setJeopardyVisible: Dispatch<SetStateAction<boolean>>;\n  setDoubleJeopardyVisible: Dispatch<SetStateAction<boolean>>;\n  setFinalJeopardyVisible: Dispatch<SetStateAction<boolean>>;\n}\n\nconst BottomMenu: React.FC<BottomMenuProps> = ({\n  setJeopardyVisible,\n  setDoubleJeopardyVisible,\n  setFinalJeopardyVisible,\n}): JSX.Element => {\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n\n  return (\n    <BottomNavigation\n      value={value}\n      onChange={(event, newValue) => setValue(newValue)}\n      showLabels\n      className={classes.root}\n    >\n      <BottomNavigationAction\n        label=\"Jeopardy\"\n        icon={<PresentToAllIcon fontSize=\"large\" />}\n        onClick={() => {\n          setJeopardyVisible(true);\n          setDoubleJeopardyVisible(false);\n          setFinalJeopardyVisible(false);\n        }}\n      />\n      <BottomNavigationAction\n        label=\"Double Jeopardy\"\n        icon={<PresentToAllIcon fontSize=\"large\" />}\n        onClick={() => {\n          setDoubleJeopardyVisible(true);\n          setJeopardyVisible(false);\n          setFinalJeopardyVisible(false);\n        }}\n      />\n      <BottomNavigationAction\n        label=\"Final Jeopardy\"\n        icon={<PresentToAllIcon fontSize=\"large\" />}\n        onClick={() => {\n          setFinalJeopardyVisible(true);\n          setJeopardyVisible(false);\n          setDoubleJeopardyVisible(false);\n        }}\n      />\n    </BottomNavigation>\n  );\n};\n\nexport default BottomMenu;\n","import React, { useState } from 'react';\n\n// Styles\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\n// Components\nimport { Container } from '@material-ui/core';\nimport Player from '../Player/Player';\nimport PointSelection from '../PointSelection/PointSelection';\nimport BottomMenu from '../BottomMenu/BottomMenu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: 650,\n    },\n  })\n);\n\nconst App = (): JSX.Element => {\n  const classes = useStyles();\n  const [name, setName] = useState('Player');\n  const [score, setScore] = useState(0);\n  const [jeopardyVisible, setJeopardyVisibility] = useState(true);\n  const [doubleJeopardyVisible, setDoubleJeopardyVisibility] = useState(false);\n  const [finalJeopardyVisible, setFinalJeopardyVisibility] = useState(false);\n\n  return (\n    <>\n      <Container maxWidth=\"sm\" className={classes.root}>\n        <Player\n          name={name}\n          setName={setName}\n          score={score}\n          setScore={setScore}\n        />\n        <PointSelection\n          jeopardyVisible={jeopardyVisible}\n          doubleJeopardyVisible={doubleJeopardyVisible}\n          finalJeopardyVisible={finalJeopardyVisible}\n          score={score}\n          setScore={setScore}\n        />\n      </Container>\n      <BottomMenu\n        setJeopardyVisible={setJeopardyVisibility}\n        setDoubleJeopardyVisible={setDoubleJeopardyVisibility}\n        setFinalJeopardyVisible={setFinalJeopardyVisibility}\n      />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}